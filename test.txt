
Incorrect Usage: flag provided but not defined: -y

NAME:
   rocketpool service config - Configure the Rocket Pool service

USAGE:
   rocketpool service config

OPTIONS:
   --executionClientMode value  Choose which mode to use for your Execution client - locally managed (Docker Mode), or externally managed (Hybrid Mode).
                                Type: choice
                                Options: local, external
 (default: "local")
   --executionClient value  Select which Execution client you would like to run.
                            Type: choice
                            Options: geth, nethermind, besu
 (default: "geth")
   --useFallbackClients    Enable this if you would like to specify a fallback Execution and Consensus Client, which will temporarily be used by the Smartnode and your Validator Client if your primary Execution / Consensus client pair ever go offline (e.g. if you switch, prune, or resync your clients).
                           Type: bool
   --reconnectDelay value  The delay to wait after your primary Execution or Consensus clients fail before trying to reconnect to them. An example format is "10h20m30s" - this would make it 10 hours, 20 minutes, and 30 seconds.
                           Type: string
 (default: "60s")
   --consensusClientMode value  Choose which mode to use for your Consensus client - locally managed (Docker Mode), or externally managed (Hybrid Mode).
                                Type: choice
                                Options: local, external
 (default: "local")
   --consensusClient value  Select which Consensus client you would like to use.
                            Type: choice
                            Options: lighthouse, lodestar, nimbus, prysm, teku
 (default: "nimbus")
   --externalConsensusClient value  Select which Consensus client your externally managed client is.
                                    Type: choice
                                    Options: lighthouse, lodestar, nimbus, prysm, teku
 (default: "lighthouse")
   --enableMetrics            Enable the Smartnode's performance and status metrics system. This will provide you with the node operator's Grafana dashboard.
                              Type: bool
   --enableODaoMetrics        Enable the tracking of Oracle DAO performance metrics, such as prices and balances submission participation.
                              Type: bool
   --enableBitflyNodeMetrics  Enable the Beaconcha.in node metrics integration. This will allow you to track your node's metrics from your phone using the Beaconcha.in App.

For more information on setting up an account and the app, please visit https://beaconcha.in/mobile.
                          Type: bool
   --ecMetricsPort value  The port your Execution client should expose its metrics on.
                          Type: uint16
 (default: 9105)
   --bnMetricsPort value  The port your Consensus client's Beacon Node should expose its metrics on.
                          Type: uint16
 (default: 9100)
   --vcMetricsPort value  The port your validator client should expose its metrics on.
                          Type: uint16
 (default: 9101)
   --nodeMetricsPort value  The port your Node container should expose its metrics on.
                            Type: uint16
 (default: 9102)
   --exporterMetricsPort value  The port that Prometheus's Node Exporter should expose its metrics on.
                                Type: uint16
 (default: 9103)
   --watchtowerMetricsPort value  The port your Watchtower container should expose its metrics on.
This is only relevant for Oracle Nodes.
  Type: uint16
 (default: 9104)
   --enableMevBoost  Enable MEV-Boost, which connects your validator to one or more relays of your choice. The relays act as intermediaries between you and professional block builders that find and extract MEV opportunities. The builders will give you a healthy tip in return, which tends to be worth more than blocks you built on your own.

[orange]NOTE: This toggle is temporary during the early Merge days while relays are still being created. It will be removed in the future.
                                                     Type: bool
   --geth-enablePbss rocketpool service resync-eth1  Enable Geth's new path-based state scheme. With this enabled, you will no longer need to manually prune Geth; it will automatically prune its database in real-time.

[orange]NOTE:
Enabling this will require you to remove and resync your Geth DB using rocketpool service resync-eth1.
You will need a synced fallback node configured before doing this, or you will no longer be able to attest until it has finished resyncing!
                          Type: bool
   --geth-maxPeers value  The maximum number of peers Geth should connect to. This can be lowered to improve performance on low-power systems or constrained config.Networks. We recommend keeping it at 12 or higher.
                          Type: uint16
 (default: 50)
   --geth-containerTag value  The tag name of the Geth container you want to use on Docker Hub.
                              Type: string
 (default: "ethereum/client-go:v1.13.2")
   --geth-additionalFlags value  Additional custom command line flags you want to pass to Geth, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                 Type: string
   --nimbus-maxPeers value       The maximum number of peers your client should try to maintain. You can try lowering this if you have a low-resource system or a constrained network.
                                 Type: uint16
 (default: 160)
   --nimbus-pruningMode value  Choose how Nimbus will prune its database. Highlight each option to learn more about it.
                               Type: choice
                               Options: archive, prune
 (default: "archive")
   --nimbus-bnContainerTag value  The tag name of the Nimbus Beacon Node container you want to use on Docker Hub.
                                  Type: string
 (default: "statusim/nimbus-eth2:multiarch-v23.9.1")
   --nimbus-containerTag value  The tag name of the Nimbus Validator Client container you want to use on Docker Hub.
                                Type: string
 (default: "statusim/nimbus-validator-client:multiarch-v23.9.1")
   --nimbus-additionalBnFlags value      Additional custom command line flags you want to pass Nimbus's Beacon Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                         Type: string
   --nimbus-additionalVcFlags value      Additional custom command line flags you want to pass Nimbus's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                         Type: string
   --fallbackNormal-ecHttpUrl localhost  The URL of the HTTP API endpoint for your fallback Execution client.

NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                         Type: string
   --fallbackNormal-ccHttpUrl localhost  The URL of the HTTP Beacon API endpoint for your fallback Consensus client.

NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                           Type: string
   --bitflyNodeMetrics-bitflySecret value  The API key used to authenticate your Beaconcha.in node metrics integration. Can be found in your Beaconcha.in account settings.

Please visit https://beaconcha.in/user/settings#api to access your account information.
                                             Type: string
   --bitflyNodeMetrics-bitflyEndpoint value  The endpoint to send your Beaconcha.in Node Metrics data to. Should be left as the default.
                                             Type: string
 (default: "https://beaconcha.in/api/v1/client/metrics")
   --bitflyNodeMetrics-bitflyMachineName value  The name of the machine you are running on. This is used to identify your machine in the mobile app.
Change this if you are running multiple Smartnodes with the same Secret.
  Type: string
 (default: "Smartnode")
   --mevBoost-mode value  Choose whether to let the Smartnode manage your MEV-Boost instance (Locally Managed), or if you manage your own outside of the Smartnode stack (Externally Managed).
                          Type: choice
                          Options: local, external
 (default: "local")
   --mevBoost-selectionMode value  Select how the TUI shows you the options for which MEV relays to enable.
                                   Type: choice
                                   Options: profile, relay
 (default: "profile")
   --mevBoost-enableRegulatedAllMev  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]Select this to enable the relays that comply with government regulations (e.g. OFAC sanctions), 

Relays: Flashbots, bloXroute Regulated, Eden Network
                                       Type: bool
   --mevBoost-enableUnregulatedAllMev  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]Select this to enable the relays that do not follow any sanctions lists (do not censor transactions), 

Relays: bloXroute Max Profit, Ultra Sound, Aestus
                                Type: bool
   --mevBoost-flashbotsEnabled  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]Flashbots is the developer of MEV-Boost, and one of the best-known and most trusted relays in the space.

Complies with Regulations: YES

                                         Type: bool
   --mevBoost-bloxRouteMaxProfitEnabled  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]Select this to enable the "max profit" relay from bloXroute.

Complies with Regulations: NO

                                         Type: bool
   --mevBoost-bloxRouteRegulatedEnabled  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]Select this to enable the "regulated" relay from bloXroute.

Complies with Regulations: YES

                           Type: bool
   --mevBoost-edenEnabled  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]Eden Network is the home of Eden Relay, a block building hub focused on optimising block rewards for validators.

Complies with Regulations: YES

                                 Type: bool
   --mevBoost-ultrasoundEnabled  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]The ultra sound relay is a credibly-neutral and permissionless relay — a public good from the ultrasound.money team.

Complies with Regulations: NO

                             Type: bool
   --mevBoost-aestusEnabled  [lime]NOTE: You can enable multiple options.

To learn more about MEV, please visit https://docs.rocketpool.net/guides/node/mev.html.

[white]The Aestus MEV-Boost Relay is an independent and non-censoring relay. It is committed to neutrality and the development of a healthy MEV-Boost ecosystem.

Complies with Regulations: NO

                          Type: bool
   --mevBoost-port value  The port that MEV-Boost should serve its API on.
                          Type: uint16
 (default: 18550)
   --mevBoost-openRpcPort value  Expose the API port to other processes on your machine, or to your local network so other local machines can access MEV-Boost's API.
                                 Type: choice
                                 Options: closed, localhost, external
 (default: "closed")
   --mevBoost-containerTag value  The tag name of the MEV-Boost container you want to use on Docker Hub.
                                  Type: string
 (default: "flashbots/mev-boost:1.6")
   --mevBoost-additionalFlags value  Additional custom command line flags you want to pass to MEV-Boost, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                     Type: string
   --mevBoost-externalUrl value      The URL of the external MEV-Boost client or provider
                                     Type: string
   --addons-gww-enabled              Enable the Graffiti Wall Writer
                                     Type: bool
   --addons-gww-inputUrl addons/gww  URL or filepath for the input JSON file that contains the graffiti image to write to the wall. By default, this is the Rocket Pool logo.

See https://gist.github.com/RomiRand/dfa1b5286af3e926deff0be2746db2df for info on making your own images.

NOTE: for local files, you must manually put the file into the addons/gww folder of your `rocketpool` directory, and then enter the name of it as `/gww/<filename>` here.
  Type: string
 (default: "https://cdn-rocketpool.s3.us-west-2.amazonaws.com/graffiti.json")
   --addons-gww-updateWallTime value  The time, in seconds, between updating the beaconcha.in graffiti wall canvas
                                      Type: uint
 (default: 600)
   --addons-gww-updateInputTime value  The time, in seconds, between input updates - only if remote URL is used. File will be instantly reloaded when changed.
                                       Type: uint
 (default: 600)
   --addons-gww-updatePixelTime value  The time, in seconds, between output updates.
                                       Type: uint
 (default: 60)
   --addons-gww-containerTag value  The tag name of the container you want to use on Docker Hub.
                                    Type: string
 (default: "rocketpool/graffiti-wall-addon:v1.0.1")
   --addons-gww-additionalFlags value  Additional custom command line flags you want to pass to the addon, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                       Type: string
   --externalTeku-httpUrl localhost    The URL of the HTTP Beacon API endpoint for your external client.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                  Type: string
   --externalTeku-graffiti value  Add a short message to any blocks you propose, so the world can see what you have to say!
It has a 16 character limit.
                                      Type: string
   --externalTeku-containerTag value  The tag name of the Teku container you want to use from Docker Hub. This will be used for the Validator Client that Rocket Pool manages with your minipool keys.
                                      Type: string
 (default: "consensys/teku:23.10.0")
   --externalTeku-additionalVcFlags value  Additional custom command line flags you want to pass Teku's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                           Type: string
   --exporter-enableRootFs                 Give Prometheus's Node Exporter permission to view your root filesystem instead of being limited to its own Docker container.
This is needed if you want the Grafana dashboard to report the used disk space of a second SSD.
                                  Type: bool
   --exporter-containerTag value  The tag name of the Prometheus Node Exporter container you want to use on Docker Hub.
                                  Type: string
 (default: "prom/node-exporter:v1.6.1")
   --exporter-additionalFlags value  Additional custom command line flags you want to pass to the Node Exporter, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                     Type: string
   --besu-jvmHeapSize value          The max amount of RAM, in MB, that Besu's JVM should limit itself to. Setting this lower will cause Besu to use less RAM, though it will always use more than this limit.

Use 0 for automatic allocation.
  Type: uint
 (default: 0)
   --besu-maxPeers value  The maximum number of peers Besu should connect to. This can be lowered to improve performance on low-power systems or constrained networks. We recommend keeping it at 12 or higher.
                          Type: uint16
 (default: 25)
   --besu-maxBackLayers value  Besu has the ability to revisit the state of any historical block on the chain by "replaying" all of the previous blocks to get back to the target. This limit controls how many blocks you can replay - in other words, how far back Besu can go in time. Normal Execution client processing will be paused while a replay is in progress.

[orange]NOTE: If you try to replay a state from a long time ago, it may take Besu several minutes to rebuild the state!
  Type: uint
 (default: 512)
   --besu-containerTag value  The tag name of the Besu container you want to use on Docker Hub.
                              Type: string
 (default: "hyperledger/besu:23.10.0")
   --besu-additionalFlags value      Additional custom command line flags you want to pass to Besu, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                     Type: string
   --consensusCommon-graffiti value  Add a short message to any blocks you propose, so the world can see what you have to say!
It has a 16 character limit.
                                              Type: string
   --consensusCommon-checkpointSyncUrl value  If you would like to instantly sync using an existing Beacon node, enter its URL.
Example: https://<project ID>:<secret>@eth2-beacon-prater.infura.io
Leave this blank if you want to sync normally from the start of the chain.
                                    Type: string
   --consensusCommon-p2pPort value  The port to use for P2P (blockchain) traffic.
                                    Type: uint16
 (default: 9001)
   --consensusCommon-apiPort value  The port your Consensus client should run its HTTP API on.
                                    Type: uint16
 (default: 5052)
   --consensusCommon-openApiPort value  Select an option to expose your Consensus client's API port to your localhost or external hosts on the network, so other machines can access it too.
                                        Type: choice
                                        Options: closed, localhost, external
 (default: "closed")
   --consensusCommon-doppelgangerDetection  If enabled, your client will *intentionally* miss 1 or 2 attestations on startup to check if validator keys are already running elsewhere. If they are, it will disable validation duties for them to prevent you from being slashed.
                                            Type: bool
   --prysm-maxPeers value                   The maximum number of peers your client should try to maintain. You can try lowering this if you have a low-resource system or a constrained network.
                                            Type: uint16
 (default: 45)
   --prysm-rpcPort value  The port Prysm should run its JSON-RPC API on.
                          Type: uint16
 (default: 5053)
   --prysm-openRpcPort value  Expose Prysm's JSON-RPC port to other processes on your machine, or to your local network so other machines can access it too.
                              Type: choice
                              Options: closed, localhost, external
 (default: "closed")
   --prysm-bnContainerTag value  The tag name of the Prysm Beacon Node container you want to use on Docker Hub.
                                 Type: string
 (default: "rocketpool/prysm:v4.0.8")
   --prysm-vcContainerTag value  The tag name of the Prysm Validator Client container you want to use on Docker Hub.
                                 Type: string
 (default: "rocketpool/prysm:v4.0.8")
   --prysm-additionalBnFlags value  Additional custom command line flags you want to pass Prysm's Beacon Node, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                    Type: string
   --prysm-additionalVcFlags value  Additional custom command line flags you want to pass Prysm's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                    Type: string
   --teku-jvmHeapSize value         The max amount of RAM, in MB, that Teku's JVM should limit itself to. Setting this lower will cause Teku to use less RAM, though it will always use more than this limit.

Use 0 for automatic allocation.
  Type: uint
 (default: 0)
   --teku-maxPeers value  The maximum number of peers your client should try to maintain. You can try lowering this if you have a low-resource system or a constrained network.
                          Type: uint16
 (default: 100)
   --teku-archiveMode  When enabled, Teku will run in "archive" mode which means it can recreate the state of the Beacon chain for a previous block. This is required for manually generating the Merkle rewards tree.

If you are sure you will never be manually generating a tree, you can disable archive mode.
                              Type: bool
   --teku-containerTag value  The tag name of the Teku container you want to use on Docker Hub.
                              Type: string
 (default: "consensys/teku:23.10.0")
   --teku-additionalBnFlags value          Additional custom command line flags you want to pass Teku's Beacon Node, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                           Type: string
   --teku-additionalVcFlags value          Additional custom command line flags you want to pass Teku's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                           Type: string
   --externalLighthouse-httpUrl localhost  The URL of the HTTP Beacon API endpoint for your external client.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                        Type: string
   --externalLighthouse-graffiti value  Add a short message to any blocks you propose, so the world can see what you have to say!
It has a 16 character limit.
                                               Type: string
   --externalLighthouse-doppelgangerDetection  If enabled, your client will *intentionally* miss 1 or 2 attestations on startup to check if validator keys are already running elsewhere. If they are, it will disable validation duties for them to prevent you from being slashed.
                                               Type: bool
   --externalLighthouse-containerTag value     The tag name of the Lighthouse container you want to use from Docker Hub. This will be used for the Validator Client that Rocket Pool manages with your minipool keys.
                                               Type: string
 (default: "sigp/lighthouse:v4.5.0-modern")
   --externalLighthouse-additionalVcFlags value  Additional custom command line flags you want to pass Lighthouse's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                                 Type: string
   --externalLodestar-httpUrl localhost          The URL of the HTTP Beacon API endpoint for your external client.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                      Type: string
   --externalLodestar-graffiti value  Add a short message to any blocks you propose, so the world can see what you have to say!
It has a 16 character limit.
                                             Type: string
   --externalLodestar-doppelgangerDetection  If enabled, your client will *intentionally* miss 1 or 2 attestations on startup to check if validator keys are already running elsewhere. If they are, it will disable validation duties for them to prevent you from being slashed.
                                             Type: bool
   --externalLodestar-containerTag value     The tag name of the Lodestar container you want to use from Docker Hub. This will be used for the Validator Client that Rocket Pool manages with your minipool keys.
                                             Type: string
 (default: "chainsafe/lodestar:v1.11.3")
   --externalLodestar-additionalVcFlags value  Additional custom command line flags you want to pass Lodestar's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                               Type: string
   --grafana-port value                        The port Grafana should run its HTTP server on - this is the port you will connect to in your browser.
                                               Type: uint16
 (default: 3100)
   --grafana-containerTag value  The tag name of the Grafana container you want to use on Docker Hub.
                                 Type: string
 (default: "grafana/grafana:9.4.15")
   --native-ecHttpUrl value        The URL of the HTTP RPC endpoint for your Execution client (e.g. http://localhost:8545).
                                   Type: string
   --native-consensusClient value  Select which Consensus client you are using / will use.
                                   Type: choice
                                   Options: lighthouse, lodestar, nimbus, prysm, teku
 (default: "nimbus")
   --native-ccHttpUrl value                The URL of the HTTP Beacon API endpoint for your Consensus client (e.g. http://localhost:5052).
                                           Type: string
   --native-validatorRestartCommand value  The absolute path to a custom script that will be invoked when Rocket Pool needs to restart your validator container to load the new key after a minipool is staked.
                                           Type: string
 (default: "restart-vc.sh")
   --native-validatorStopCommand value  The absolute path to a custom script that will be invoked when Rocket Pool needs to stop your validator container in case of emergency. **For Native mode only.**
                                        Type: string
 (default: "stop-validator.sh")
   --smartnode-network value  The Ethereum network you want to use - select Prater Testnet or Holesky Testnet to practice with fake ETH, or Mainnet to stake on the real network using real ETH.
                              Type: choice
                              Options: mainnet, prater, holesky
 (default: "mainnet")
   --smartnode-projectName value  This is the prefix that will be attached to all of the Docker containers managed by the Smartnode.
                                  Type: string
 (default: "rocketpool")
   --smartnode-dataPath data  The absolute path of the data folder that contains your node wallet's encrypted file, the password for your node wallet, and all of the validator keys for your minipools. You may use environment variables in this string.
                              Type: string
 (default: "data")
   --smartnode-manualMaxFee value  Set this if you want all of the Smartnode's transactions to use this specific max fee value (in gwei), which is the most you'd be willing to pay (*including the priority fee*).

A value of 0 will show you the current suggested max fee based on the current network conditions and let you specify it each time you do a transaction.

Any other value will ignore the recommended max fee and explicitly use this value instead.

This applies to automated transactions (such as claiming RPL and staking minipools) as well.
  Type: float
 (default: 0)
   --smartnode-priorityFee value  The default value for the priority fee (in gwei) for all of your transactions. This describes how much you're willing to pay *above the network's current base fee* - the higher this is, the more ETH you give to the validators for including your transaction, which generally means it will be included in a block faster (as long as your max fee is sufficiently high to cover the current network conditions).

Must be larger than 0.
  Type: float
 (default: 2)
   --smartnode-minipoolStakeGasThreshold stake  Occasionally, the Smartnode will attempt to perform some automatic transactions (such as the second stake transaction to finish launching a minipool or the `reduce bond` transaction to convert a 16-ETH minipool to an 8-ETH one). During these, your node will use the `Rapid` suggestion from the gas estimator as its max fee.

This threshold is a limit (in gwei) you can put on that suggestion; your node will not `stake` the new minipool until the suggestion is below this limit.

A value of 0 will disable non-essential automatic transactions (such as minipool balance distribution and bond reduction), but essential transactions (such as minipool staking and solo migration promotion) will not be disabled.

NOTE: the node will ignore this limit and automatically execute transactions at whatever the suggested fee happens to be once too much time has passed since those transactions were first eligible. You may end up paying more than you wanted to if you set this too low!
  Type: float
 (default: 150)
   --smartnode-distributeThreshold value  The Smartnode will regularly check the balance of each of your minipools on the Execution Layer (**not** the Beacon Chain).
If any of them have a balance greater than this threshold (in ETH), the Smartnode will automatically distribute the balance. This will send your share of the balance to your withdrawal address.

Must be less than 8 ETH.

Set this to 0 to disable automatic distributes.
[orange]WARNING: if you disable automatic distribution, you **must** ensure you distribute your minipool's balance before it reaches 8 ETH or you will no longer be able to distribute your rewards until you exit the minipool!
  Type: float
 (default: 1)
   --smartnode-rewardsTreeMode value  Select how you want to acquire the Merkle Tree files for each rewards interval.
                                      Type: choice
                                      Options: download, generate
 (default: "download")
   --smartnode-archiveECUrl value  [orange]**For manual Merkle rewards tree generation only.**[white]

Generating the Merkle rewards tree files for past rewards intervals typically requires an Execution client with Archive mode enabled, which is usually disabled on your primary and fallback Execution clients to save disk space.
If you want to generate your own rewards tree files for intervals from a long time ago, you may enter the URL of an Execution client with Archive access here.

For a free light client with Archive access, you may use https://www.alchemy.com/supernode.
                                          Type: string
   --smartnode-web3StorageApiToken value  [orange]**For Oracle DAO members only.**

[white]The API token for your https://web3.storage/ account. This is required in order for you to upload Merkle rewards trees to Web3.Storage at each rewards interval.
                                               Type: string
   --smartnode-watchtowerMaxFeeOverride value  [orange]**For Oracle DAO members only.**

[white]Use this to override the max fee (in gwei) for watchtower transactions. Note that if you set it below 200, the setting will be ignored; it can only be used to set the max fee higher than 200 during times of extreme network stress.
  Type: float
 (default: 200)
   --smartnode-watchtowerPrioFeeOverride value  [orange]**For Oracle DAO members only.**

[white]Use this to override the priority fee (in gwei) for watchtower transactions. Note that if you set it below 3, the setting will be ignored; it can only be used to set the priority fee higher than 3 during times of extreme network stress.
  Type: float
 (default: 3)
   --smartnode-useRollingRecords  [orange]**WARNING: EXPERIMENTAL**

[white]Enable this to use the new rolling records feature, which stores attestation records for the entire Rocket Pool network in real time instead of collecting them all after a rewards period during tree generation.

Only useful for the Oracle DAO, or if you generate your own rewards trees.
                                               Type: bool
   --smartnode-recordCheckpointInterval value  The number of epochs that should pass before saving a new rolling record checkpoint. Used if Rolling Records is enabled.

Only useful for the Oracle DAO, or if you generate your own rewards trees.
  Type: uint
 (default: 45)
   --smartnode-checkpointRetentionLimit value  The number of checkpoint files to save on-disk before pruning old ones. Used if Rolling Records is enabled.

Only useful for the Oracle DAO, or if you generate your own rewards trees.
  Type: uint
 (default: 200)
   --smartnode-recordsPath value  The path of the folder to store rolling record checkpoints in during a rewards interval. Used if Rolling Records is enabled.

Only useful if you're an Oracle DAO member, or if you generate your own rewards trees.
  Type: string
 (default: "data/records")
   --executionCommon-httpPort value  The port your Execution client should use for its HTTP API endpoint (also known as HTTP RPC API endpoint).
                                     Type: uint16
 (default: 8545)
   --executionCommon-wsPort value  The port your Execution client should use for its Websocket API endpoint (also known as Websocket RPC API endpoint).
                                   Type: uint16
 (default: 8546)
   --executionCommon-enginePort value  The port your Execution client should use for its Engine API endpoint (the endpoint the Consensus client will connect to post-merge).
                                       Type: uint16
 (default: 8551)
   --executionCommon-openRpcPorts value  Expose the HTTP and Websocket RPC ports to other processes on your machine, or to your local network so other machines can access your Execution Client's RPC endpoint.
                                         Type: choice
                                         Options: closed, localhost, external
 (default: "closed")
   --executionCommon-p2pPort value  The port Geth should use for P2P (blockchain) traffic to communicate with other nodes.
                                    Type: uint16
 (default: 30303)
   --executionCommon-ethstatsLabel value  If you would like to report your Execution client statistics to https://ethstats.net/, enter the label you want to use here.
                                          Type: string
   --executionCommon-ethstatsLogin value  If you would like to report your Execution client statistics to https://ethstats.net/, enter the login you want to use here.
                                          Type: string
   --nethermind-cache value               The amount of RAM (in MB) you want to suggest for Nethermind's cache. While there is no guarantee that Nethermind will stay under this limit, lower values are preferred for machines with less RAM.

The default value for this will be calculated dynamically based on your system's available RAM, but you can adjust it manually.
  Type: uint
 (default: 1024)
   --nethermind-maxPeers value  The maximum number of peers Nethermind should connect to. This can be lowered to improve performance on low-power systems or constrained config.Networks. We recommend keeping it at 12 or higher.
                                Type: uint16
 (default: 50)
   --nethermind-pruneMemSize value  The amount of RAM (in MB) you want to dedicate to Nethermind for its in-memory pruning system. Higher values mean less writes to your SSD and slower overall database growth.

The default value for this will be calculated dynamically based on your system's available RAM, but you can adjust it manually.
  Type: uint
 (default: 1024)
   --nethermind-downloadCompleteHistory rocketpool service resync-eth1  ***For Mainnet Only - No Effect on Prater or Holesky***

By default, Nethermind will only download chain information from the block that the Beacon Chain was deployed on. This will use less disk space, but other Ethereum nodes won't be able to connect to your node and fully sync from scratch.

If you prefer to use the old behavior and have Nethermind download the complete chain history, enable this setting.

[orange]NOTE: You may need to resync Nethermind for this change to take effect with rocketpool service resync-eth1.
                                         Type: bool
   --nethermind-additionalModules value  Additional modules you want to add to the primary JSON-RPC route. The defaults are Eth,Net,Personal,Web3. You can add any additional ones you need here; separate multiple modules with commas, and do not use spaces.
                                         Type: string
   --nethermind-additionalUrls value     Additional JSON-RPC URLs you want to run alongside the primary URL. These will be added to the "--JsonRpc.AdditionalRpcUrls" argument. Wrap each additional URL in quotes, and separate multiple URLs with commas (no spaces). Please consult the Nethermind documentation for more information on this flag, its intended usage, and its expected formatting.

For advanced users only.
                                    Type: string
   --nethermind-containerTag value  The tag name of the Nethermind container you want to use on Docker Hub.
                                    Type: string
 (default: "nethermind/nethermind:1.21.0")
   --nethermind-additionalFlags value  Additional custom command line flags you want to pass to Nethermind, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                       Type: string
   --lodestar-maxPeers value           The maximum number of peers your client should try to maintain. You can try lowering this if you have a low-resource system or a constrained network.
                                       Type: uint16
 (default: 50)
   --lodestar-containerTag value  The tag name of the Lodestar container you want to use from Docker Hub.
                                  Type: string
 (default: "chainsafe/lodestar:v1.11.3")
   --lodestar-additionalBnFlags value  Additional custom command line flags you want to pass Lodestar's Beacon Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                       Type: string
   --lodestar-additionalVcFlags value  Additional custom command line flags you want to pass Lodestar's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                       Type: string
   --externalNimbus-httpUrl localhost  The URL of the HTTP Beacon API endpoint for your external client.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                    Type: string
   --externalNimbus-graffiti value  Add a short message to any blocks you propose, so the world can see what you have to say!
It has a 16 character limit.
                                           Type: string
   --externalNimbus-doppelgangerDetection  If enabled, your client will *intentionally* miss 1 or 2 attestations on startup to check if validator keys are already running elsewhere. If they are, it will disable validation duties for them to prevent you from being slashed.
                                           Type: bool
   --externalNimbus-containerTag value     The tag name of the Nimbus validator container you want to use from Docker Hub. This will be used for the Validator Client that Rocket Pool manages with your minipool keys.
                                           Type: string
 (default: "statusim/nimbus-validator-client:multiarch-v23.9.1")
   --externalNimbus-additionalVcFlags value  Additional custom command line flags you want to pass Nimbus's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                             Type: string
   --fallbackPrysm-ecHttpUrl localhost       The URL of the HTTP API endpoint for your fallback Execution client.

NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                        Type: string
   --fallbackPrysm-ccHttpUrl localhost  The URL of the HTTP Beacon API endpoint for your fallback Prysm client.

NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                         Type: string
   --fallbackPrysm-jsonRpcUrl localhost  The URL of the JSON-RPC API endpoint for your fallback client. Prysm's validator client will need this in order to connect to it.

NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                          Type: string
   --externalExecution-httpUrl localhost  The URL of the HTTP RPC endpoint for your external Execution client.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead, for example 'http://192.168.1.100:8545'.
                                        Type: string
   --externalExecution-wsUrl localhost  The URL of the Websocket RPC endpoint for your external Execution client.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead, for example 'http://192.168.1.100:8546'.
                                Type: string
   --lighthouse-maxPeers value  The maximum number of peers your client should try to maintain. You can try lowering this if you have a low-resource system or a constrained network.
                                Type: uint16
 (default: 80)
   --lighthouse-containerTag value  The tag name of the Lighthouse container you want to use from Docker Hub.
                                    Type: string
 (default: "sigp/lighthouse:v4.5.0-modern")
   --lighthouse-additionalBnFlags value  Additional custom command line flags you want to pass Lighthouse's Beacon Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                         Type: string
   --lighthouse-additionalVcFlags value  Additional custom command line flags you want to pass Lighthouse's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                         Type: string
   --externalPrysm-httpUrl localhost     The URL of the HTTP Beacon API endpoint for your external client.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                         Type: string
   --externalPrysm-jsonRpcUrl localhost  The URL of the gRPC API endpoint for your external client. Prysm's validator client will need this in order to connect to it.
NOTE: If you are running it on the same machine as the Smartnode, addresses like localhost and `127.0.0.1` will not work due to Docker limitations. Enter your machine's LAN IP address instead.
                                   Type: string
   --externalPrysm-graffiti value  Add a short message to any blocks you propose, so the world can see what you have to say!
It has a 16 character limit.
                                          Type: string
   --externalPrysm-doppelgangerDetection  If enabled, your client will *intentionally* miss 1 or 2 attestations on startup to check if validator keys are already running elsewhere. If they are, it will disable validation duties for them to prevent you from being slashed.
                                          Type: bool
   --externalPrysm-containerTag value     The tag name of the Prysm validator container you want to use from Docker Hub. This will be used for the Validator Client that Rocket Pool manages with your minipool keys.
                                          Type: string
 (default: "rocketpool/prysm:v4.0.8")
   --externalPrysm-additionalVcFlags value  Additional custom command line flags you want to pass Prysm's Validator Client, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                            Type: string
   --prometheus-port value                  The port Prometheus should make its statistics available on.
                                            Type: uint16
 (default: 9091)
   --prometheus-openPort value  Expose the Prometheus's port to other processes on your machine, or to your local network so other machines can access it too.
                                Type: choice
                                Options: closed, localhost, external
 (default: "closed")
   --prometheus-containerTag value  The tag name of the Prometheus container you want to use on Docker Hub.
                                    Type: string
 (default: "prom/prometheus:v2.47.1")
   --prometheus-additionalFlags value  Additional custom command line flags you want to pass to Prometheus, to take advantage of other settings that the Smartnode's configuration doesn't cover.
                                       Type: string
   
flag provided but not defined: -y

